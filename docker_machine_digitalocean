#!/usr/bin/env python
# -*- coding: utf-8 -*-

DOCUMENTATION = '''
---
module: docker_machine_digitalocean
short_description: Manage digitalocean docker hosts via docker-machine
version_added: "2.+"
description:
  - Create/Remove digitalocean docker hosts
options:
  state:
    description:
     - Indicate desired state of the target.
    default: present
    choices: ['running', 'absent']
author: "Jonathan Rowlands"
'''

EXAMPLES = '''
- name: Launch an Ubuntu digitalocean docker host
  hosts: 127.0.0.1
  connection: local
  tasks:
  - name: Get the Ubuntu precise AMI
    docker_machine_digitalocean: region=us-west-1 store=instance-store
'''


import os
from stat import *
import docker_machine


from ansible.module_utils.basic import *


class DockerMachineDigitaloceanModule(object):

    def __init__(self, module):
        self.driver = 'digitalocean'
        self.module = module
        args = module.params
        self.access_token = args['access_token']
        self.name = args['name']
        self.image = args['image']
        self.region = args['region']
        self.ipv6 = args['ipv6']
        self.private_networking = args['private_networking']
        self.backups = args['backups']
        self.size = args['size']
        self.state = args['state']

        self.client = docker_machine.Client()
        self.status = self.client.machine_status(self.name)

    def _check_for_early_return_reason(self):
        return None
        # if not os.path.isabs(self.orig_file):
        #     return dict(failed=True, msg="Please provide an absolute path to backup (given path: \"%s\")" % self.orig_file)
        #
        # try:
        #     os.stat(self.orig_file)
        #     return None
        # except OSError, e:
        #     # nothing to backup
        #     if e.errno == errno.ENOENT:
        #         return dict(skipped=True, msg="%s does not exist" % self.orig_file)
        #     return dict(failed=True, msg=e.strerror)

    def is_change(self):
        return self.state != self.status or (self.state == 'absent' and self.status is not None)

    def driver_config(self):
        return DigitaloceanDriverConfig(self.access_token, self.image, self.region, self.ipv6, self.private_networking,
                                        self.size)

    def execute(self):
        early_return = self._check_for_early_return_reason()
        if early_return:
            return early_return

        if not self.is_change():
            return dict(changed=False)

        if self.state == 'running' and self.status is None:
            self.client.create_machine(self.name, self.driver_config)
            # TODO: check if was successful
            return dict(changed=True)

        # if self.state == 'absent' and self.status is not None:
        #     if status == 'running':
        #         client.remove_machine(self.name)
        #         # TODO: Check that it was successful
        #         return dict(changed=True)

        return dict(changed=False)

def main():
    # global module

    module = AnsibleModule(
        argument_spec = dict(
            state               = dict(required=False, default='running', choices=['running', 'absent']),
            name                = dict(required=True),
            access_token        = dict(required=True),
            image               = dict(required=False, default='ubuntu-14-04-x64'),
            ipv6                = dict(required=False, default=False, choices=BOOLEANS),
            region              = dict(required=False, default='nyc3'),
            backups             = dict(required=False, default=False, choices=BOOLEANS),
            size                = dict(required=False, default='512mb'),
            private_networking  = dict(required=False, default=False, choices=BOOLEANS)
        )
    )

    result = DockerMachineDigitaloceanModule(module).execute()
    module.exit_json(**result)

from ansible.module_utils.basic import *

if __name__ == '__main__':
    main()
